import streamlit as st
import numpy as np
import pandas as pd

dataframe = pd.DataFrame(
    np.random.randn(10, 20),
    columns=('col %d' % i for i in range(20)))

#  Para "marcar" los valores m√°ximos de cada columna
st.dataframe(dataframe.style.highlight_max(axis=0)) 

st.write('---')

#  Mostrar como tabla, similar pero m√°s condensado al dataframe
st.table(dataframe)

st.write('---')

#  Graficar con l√≠neas
chart_data = pd.DataFrame(
     np.random.randn(20, 3),
     columns=['a', 'b', 'c'])

st.line_chart(chart_data)

st.write('---')

#  Graficar con mapa geogr√°fico
map_data = pd.DataFrame(
    np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4],
    columns=['lat', 'lon'])

st.map(map_data)

st.write('---')

#  L√≠nea de selecci√≥n de datos, widget
x = st.slider('x')  # üëà this is a widget
st.write(x, 'squared is', x * x)

#  Se puede dar nombre a√±adiendo "key", autom√°ticamente se guarda en Session data
st.text_input("Your name", key="name")

# You can access the value at any point with:
st.session_state.name

'''
EJEMPLOS USO SESSION_STATE
'''
if "counter" not in st.session_state:
    st.session_state.counter = 0

st.session_state.counter += 1

st.header(f"This page has run {st.session_state.counter} times.")
st.button("Run it again")


st.write('---')

#  Uso de checkbox para mostrar u ocultar datos
if st.checkbox('Show dataframe'):
    chart_data = pd.DataFrame(
       np.random.randn(20, 3),
       columns=['a', 'b', 'c'])

    chart_data


#  Uso de selectbox para elegir entre opciones
df = pd.DataFrame({
   'first column': [1, 2, 3, 4],
   'second column': [10, 20, 30, 40]
   })

option = st.selectbox(
    'Which number do you like best?',
     df['first column'])

'You selected: ', option

'''
BARRA LATERAL - PANEL IZQUIERDO

Streamlit facilita la organizaci√≥n de sus widgets en una barra lateral del panel izquierdo con st.sidebar. Cada elemento que se pasa a st.sidebar se fija a la izquierda, lo que permite usuarios para que se centren en el contenido de la aplicaci√≥n sin dejar de tener acceso a la interfaz de usuario mandos.

Por ejemplo, si desea agregar un selectbox y un control deslizante a una barra lateral, use y en lugar de y :st.sidebar.sliderst.sidebar.selectboxst.sliderst.selectbox
'''
# Add a selectbox to the sidebar:
add_selectbox = st.sidebar.selectbox(
    'How would you like to be contacted?',
    ('Email', 'Home phone', 'Mobile phone')
)

# Add a slider to the sidebar:
add_slider = st.sidebar.slider(
    'Select a range of values',
    0.0, 100.0, (25.0, 75.0)
)

'''
M√°s all√° de la barra lateral, Streamlit ofrece varias otras formas de controlar el dise√±o de tu app. st.columns te permite colocar widgets uno al lado del otro, y st.expander te permite ahorrar espacio ocultando contenido grande.
'''

left_column, right_column = st.columns(2)

# You can use a column just like st.sidebar:
left_column.button('Press me!')

# Or even better, call Streamlit functions inside a "with" block:
with right_column:
    chosen = st.radio(
        'Sorting hat',
        ("Gryffindor", "Ravenclaw", "Hufflepuff", "Slytherin"))
    st.write(f"You are in {chosen} house!")
    
'''
MOSTRAR BARRA PROGRESO
Cuando agregas c√°lculos de larga duraci√≥n a una app, puedes usar st.progress() para mostrar el estado en tiempo real.

Primero, importemos el tiempo. Vamos a usar el m√©todo para Simule un c√°lculo de larga duraci√≥n:time.sleep()
'''
import time

'Starting a long computation...'

# Add a placeholder
latest_iteration = st.empty()
bar = st.progress(0)

for i in range(100):
  # Update the progress bar with each iteration.
  latest_iteration.text(f'Iteration {i+1}')
  bar.progress(i + 1)
  time.sleep(0.1)

'...and now we\'re done!'

'''
ALMACENAMIENTO CACHE PARA FUNCIONES
El almacenamiento en cach√© le permite guardar la salida de una funci√≥n para que pueda omitirla al volver a ejecutarla. El estado de sesi√≥n le permite guardar informaci√≥n para cada usuario que se conserva entre reejecuciones. Esto no solo le permite evitar rec√°lculos innecesarios, sino que tambi√©n le permite crear p√°ginas din√°micas y manejar procesos progresivos.

Cach√©
El almacenamiento en cach√© permite que tu app siga funcionando incluso cuando cargas datos desde la web, manipulas grandes conjuntos de datos o realizas c√°lculos costosos.

La idea b√°sica detr√°s del almacenamiento en cach√© es almacenar los resultados de costosas llamadas a funciones y devolver el resultado almacenado en cach√© cuando se vuelven a producir las mismas entradas. Esto evita la ejecuci√≥n repetida de una funci√≥n con los mismos valores de entrada.

Para almacenar en cach√© una funci√≥n en Streamlit, debe aplicarle un decorador de almacenamiento en cach√©. Tienes dos opciones:

st.cache_data es la forma recomendada de almacenar en cach√© los c√°lculos que devuelven datos. √öselo cuando use una funci√≥n que devuelva un objeto de datos serializable (por ejemplo, str, int, float, DataFrame, dict, list). Crea una nueva copia de los datos en cada llamada a la funci√≥n, lo que la hace segura contra mutaciones y condiciones de carrera. El comportamiento de es lo que desea en la mayor√≠a de los casos, as√≠ que si no est√° seguro, ¬°comience y vea si funciona!st.cache_datast.cache_datast.cache_data
st.cache_resource es la forma recomendada de almacenar en cach√© recursos globales, como modelos de AA o conexiones de bases de datos. √öselo cuando la funci√≥n devuelva objetos no serializables que no desea cargar varias veces. Devuelve el objeto almacenado en cach√©, que se comparte entre todas las reejecuciones y sesiones sin copiar ni duplicar. Si muta un objeto que se almacena en cach√© mediante , esa mutaci√≥n existir√° en todas las reejecuciones y sesiones.st.cache_resourcest.cache_resource
'''
@st.cache_data
def long_running_function(param1, param2):
    return param1 + param2





