'''
https://docs.streamlit.io/develop/concepts/design/dataframes

Marcos de datos
Los marcos de datos son una excelente manera de mostrar y editar datos en formato tabular. Trabajar con Pandas DataFrames y otras estructuras de datos tabulares es clave para los flujos de trabajo de ciencia de datos. Si los desarrolladores y cient√≠ficos de datos quieren mostrar estos datos en Streamlit, tienen m√∫ltiples opciones: y . Si desea mostrar √∫nicamente datos en una interfaz de usuario similar a una tabla, st.dataframe es el camino a seguir. Si desea editar datos de forma interactiva, utilice st.data_editor. Exploramos los casos de uso y las ventajas de cada opci√≥n en las siguientes secciones.st.dataframest.data_editor

Visualizaci√≥n de tramas de datos con st.dataframe
Streamlit puede mostrar tramas de datos en una interfaz de usuario similar a una tabla a trav√©s de:st.dataframe
'''
import streamlit as st
import pandas as pd

df = pd.DataFrame(
    [
        {"command": "st.selectbox", "rating": 4, "is_widget": True},
        {"command": "st.balloons", "rating": 5, "is_widget": False},
        {"command": "st.time_input", "rating": 3, "is_widget": True},
    ]
)

st.dataframe(df, use_container_width=True)


'''
st.dataframe Caracter√≠sticas de la interfaz de usuario

st.dataframe Proporciona funcionalidad adicional mediante el uso de glide-data-grid bajo el cap√≥:

Ordenaci√≥n de columnas: Para ordenar columnas, seleccione sus encabezados o seleccione "Orden ascendente" u "Orden descendente" en el men√∫ de encabezado (more_vert).
Cambio de tama√±o de columna: para cambiar el tama√±o de las columnas, arrastre y suelte los bordes del encabezado de la columna o seleccione "Tama√±o autom√°tico" en el men√∫ del encabezado.
Ocultar columnas: Para ocultar columnas, seleccione "Ocultar columna" en el men√∫ de encabezado.
Reordenar y anclar columnas: Para reordenar columnas o anclarlas a la izquierda, arrastre y suelte los encabezados de columna o seleccione "Anclar columna" en el men√∫ de encabezado, respectivamente.
Dar formato a n√∫meros, fechas y horas: Para cambiar el formato de las columnas num√©ricas, selecciona una opci√≥n en "Formato" en el men√∫ de encabezado.
Cambio de tama√±o de tramas de datos: para cambiar el tama√±o de las tramas de datos, arrastre y suelte la esquina inferior derecha.
Vista de pantalla completa: para ampliar los marcos de datos a pantalla completa, selecciona el √≠cono de pantalla completa (pantalla completa) en la barra de herramientas.
Buscar: para buscar en los datos, seleccione el icono de b√∫squeda (buscar) en la barra de herramientas o use teclas de acceso r√°pido ( o ).‚åò+FCtrl+F
Descargar: Para descargar los datos como un archivo CSV, seleccione el icono de descarga (descargar) en la barra de herramientas.
Copiar al portapapeles: Para copiar los datos en el portapapeles, seleccione una o varias celdas, use las teclas de acceso r√°pido ( o ) y p√©guelas en su software de hoja de c√°lculo favorito.‚åò+CCtrl+C

Pruebe todas las caracter√≠sticas de la interfaz de usuario con la aplicaci√≥n incrustada de la secci√≥n anterior.

Adem√°s de Pandas DataFrames, tambi√©n admite otros tipos comunes de Python, por ejemplo, list, dict o numpy array. Tambi√©n es compatible con Snowpark y PySpark DataFrames, que le permiten evaluar y extraer datos de bases de datos de forma perezosa. Esto puede ser √∫til para trabajar con grandes conjuntos de datos.st.dataframe
'''

'''
Editar datos con st.data_editor
Streamlit admite tramas de datos editables a trav√©s del comando. Echa un vistazo a su API en st.data_editor. Muestra el marco de datos en una tabla, similar a . ¬°Pero a diferencia de , esta tabla no es est√°tica! El usuario puede hacer clic en las celdas y editarlas. Los datos editados se devuelven en el lado de Python. Aqu√≠ hay un ejemplo:st.data_editorst.dataframest.dataframe
'''

df = pd.DataFrame(
    [
        {"command": "st.selectbox", "rating": 4, "is_widget": True},
        {"command": "st.balloons", "rating": 5, "is_widget": False},
        {"command": "st.time_input", "rating": 3, "is_widget": True},
    ]
)

edited_df = st.data_editor(df) # üëà An editable dataframe

favorite_command = edited_df.loc[edited_df["rating"].idxmax()]["command"]
st.markdown(f"Your favorite command is **{favorite_command}** üéà")

'''
st.data_editor Caracter√≠sticas de la interfaz de usuario
st.data_editor Tambi√©n admite algunas cosas adicionales:

Agregar y eliminar filas: puede hacerlo configurando al llamar a . Esto permitir√° a los usuarios agregar y eliminar filas seg√∫n sea necesario.num_rows= "dynamic"st.data_editor
Soporte de copiar y pegar: copie y pegue entre software de hoja de c√°lculo como Google Sheets y Excel.st.data_editor
Acceder a los datos editados: acceda solo a las ediciones individuales en lugar de a toda la estructura de datos editada a trav√©s del estado de sesi√≥n.
Ediciones masivas: similar a Excel, simplemente arrastre un controlador para editar las celdas vecinas.
Validaci√≥n de entrada autom√°tica: la configuraci√≥n de columnas proporciona una s√≥lida compatibilidad con tipos de datos y otras opciones configurables. Por ejemplo, no hay forma de ingresar letras en una celda num√©rica. Las celdas num√©ricas pueden tener un m√≠nimo y un m√°ximo designados.
Edite estructuras de datos comunes: admite listas, dictados, NumPy ndarray y m√°s.st.data_editor
'''

'''
Agregar y eliminar filas
Con , los visores pueden agregar o eliminar filas a trav√©s de la interfaz de usuario de la tabla. Este modo se puede activar estableciendo el par√°metro en :st.data_editornum_rows"dynamic"
'''

edited_df = st.data_editor(df, num_rows="dynamic")

'''
Para agregar nuevas filas, haga clic en el icono m√°s (agregar) en la barra de herramientas. Alternativamente, haga clic dentro de una celda sombreada debajo de la fila inferior de la tabla.
Para eliminar filas, seleccione una o m√°s filas usando las casillas de verificaci√≥n de la izquierda. Haga clic en el icono de eliminaci√≥n (b

Acceso a datos editados
----------------------
A veces, es m√°s conveniente saber qu√© celdas se han cambiado en lugar de recuperar todo el marco de datos editado. Streamlit facilita esto mediante el uso del estado de sesi√≥n. Si se establece un par√°metro, Streamlit almacenar√° los cambios realizados en la trama de datos en estado de sesi√≥n.key

Este fragmento muestra c√≥mo puede acceder a los datos modificados mediante el estado de sesi√≥n:
'''

st.data_editor(df, key="my_key", num_rows="dynamic") # üëà Set a key
st.write("Here's the value in Session State:")
st.write(st.session_state["my_key"]) # üëà Show the value in Session State

'''
En este fragmento de c√≥digo, el par√°metro se establece en . Una vez creado el editor de datos, el valor asociado a en el estado de sesi√≥n se muestra en la aplicaci√≥n mediante . Esto muestra las adiciones, ediciones y eliminaciones que se realizaron.key"my_key""my_key"st.write

Esto puede ser √∫til cuando se trabaja con marcos de datos grandes y solo necesita saber qu√© celdas han cambiado, en lugar de acceder a todo el marco de datos editado.

Usa todo lo que hemos aprendido hasta ahora y apl√≠calo a la aplicaci√≥n integrada anterior. Intente editar celdas, agregar nuevas filas y eliminar filas.

Observe c√≥mo las ediciones de la tabla se reflejan en el estado de la sesi√≥n. Cuando realiza cualquier edici√≥n, se activa una nueva ejecuci√≥n que env√≠a las ediciones al backend. El estado del widget es un objeto JSON que contiene tres propiedades: edited_rows, added_rows y deleted rows:.

  * edited_rows es un diccionario que contiene todas las ediciones. Las claves son √≠ndices de fila de base cero y los valores son diccionarios que asignan nombres de columna a ediciones (por ejemplo, ).{0: {"col1": ..., "col2": ...}}
  * added_rows es una lista de filas reci√©n agregadas. Cada valor es un diccionario con el mismo formato que el anterior (por ejemplo, ).[{"col1": ..., "col2": ...}]
  * deleted_rows es una lista de n√∫meros de fila que se han eliminado de la tabla (por ejemplo, ).[0, 2]
st.data_editor no admite la reordenaci√≥n de filas, por lo que las filas agregadas siempre se anexar√°n al final de la trama de datos con las ediciones y eliminaciones aplicables a las filas originales.
'''

'''
Editar estructuras de datos comunes
-----------------------------------
¬°La edici√≥n no solo funciona para Pandas DataFrames! Tambi√©n puede editar listas, tuplas, conjuntos, diccionarios, matrices NumPy o DataFrames de Snowpark y PySpark. La mayor√≠a de los tipos de datos se devolver√°n en su formato original. Pero algunos tipos (por ejemplo, Snowpark y PySpark) se convierten en DataFrames de Pandas. Para obtener informaci√≥n sobre todos los tipos admitidos, lea la API de st.data_editor.

Por ejemplo, puede permitir f√°cilmente que el usuario agregue elementos a una lista:
'''

edited_list = st.data_editor(["red", "green", "blue"], num_rows= "dynamic")
st.write("Here are all the colors you entered:")
st.write(edited_list)

'''  O matrices numpy:  '''

import numpy as np

st.data_editor(np.array([
	["st.text_area", "widget", 4.92],
	["st.markdown", "element", 47.22]
]))

'''  O listas de registros: '''

st.data_editor([
    {"name": "st.text_area", "type": "widget"},
    {"name": "st.markdown", "type": "element"},
])

''' ¬°O diccionarios y muchos m√°s tipos!  '''

st.data_editor({
	"st.text_area": "widget",
	"st.markdown": "element"
})

'''
Validaci√≥n autom√°tica de entrada
El editor de datos incluye validaci√≥n de entrada autom√°tica para ayudar a evitar errores al editar celdas. Por ejemplo, si tiene una columna que contiene datos num√©ricos, el campo de entrada restringir√° autom√°ticamente al usuario a introducir solo datos num√©ricos. Esto ayuda a evitar errores que podr√≠an producirse si el usuario introdujera accidentalmente un valor no num√©rico. Se puede configurar una validaci√≥n de entrada adicional a trav√©s de la API de configuraci√≥n de columnas. Siga leyendo a continuaci√≥n para obtener una descripci√≥n general de la configuraci√≥n de columnas, incluidas las opciones de validaci√≥n.

Configuraci√≥n de columnas
-------------------------
Puede configurar el comportamiento de visualizaci√≥n y edici√≥n de columnas en y a trav√©s de la API de configuraci√≥n de columnas. Hemos desarrollado la API para permitirle agregar im√°genes, gr√°ficos y URL en las que se puede hacer clic en el marco de datos y en las columnas del editor de datos. Adem√°s, puede hacer que las columnas individuales sean editables, establecer columnas como categ√≥ricas y especificar qu√© opciones pueden tomar, ocultar el √≠ndice de la trama de datos y mucho m√°s.st.dataframest.data_editor

La configuraci√≥n de columnas incluye los siguientes tipos de columnas: Texto, N√∫mero, Casilla de verificaci√≥n, Casilla de selecci√≥n, Fecha, Hora, Fecha y hora, Lista, V√≠nculo, Imagen, Gr√°fico de l√≠neas, Gr√°fico de barras y Progreso. Tambi√©n hay una opci√≥n gen√©rica de columna. Consulte la aplicaci√≥n integrada a continuaci√≥n para ver estos diferentes tipos de columnas. Cada tipo de columna se previsualiza individualmente en la documentaci√≥n de la API de configuraci√≥n de columnas.

Valores de formato

Hay un par√°metro disponible en la configuraci√≥n de columnas para las columnas Texto, Fecha, Hora y Fecha y hora. Tambi√©n se puede dar formato a columnas similares a gr√°ficos. Las columnas Gr√°fico de l√≠neas y Gr√°fico de barras tienen par√°metros y para establecer los l√≠mites verticales. Para una columna Progreso, puede declarar los l√≠mites horizontales con y .formaty_miny_maxmin_valuemax_value

Validar entrada

Al especificar una configuraci√≥n de columna, puede declarar no solo el tipo de datos de la columna, sino tambi√©n las restricciones de valor. Todos los elementos de configuraci√≥n de columna le permiten hacer una columna obligatoria con el par√°metro de palabra clave .required=True

En el caso de las columnas Texto y V√≠nculo, puede especificar el n√∫mero m√°ximo de caracteres con o utilizar expresiones regulares para validar las entradas a trav√©s de . Las columnas num√©ricas, incluidas N√∫mero, Fecha, Hora y Fecha y hora, tienen par√°metros y . Las columnas Selectbox tienen una lista configurable de archivos .max_charsvalidatemin_valuemax_valueoptions

El tipo de datos de las columnas N√∫mero es de forma predeterminada. Al pasar un valor de tipo a cualquiera de , , , o se establecer√° el tipo de la columna como .floatintmin_valuemax_valuestepdefaultint

Configurar una trama de datos vac√≠a

Puede usarlo para recopilar informaci√≥n tabular de un usuario. Cuando se inicia desde una trama de datos vac√≠a, los tipos de columna predeterminados son texto. Utilice la configuraci√≥n de columnas para especificar los tipos de datos que desea recopilar de los usuarios.st.data_editor
'''

import streamlit as st
import pandas as pd

df = pd.DataFrame(columns=['name','age','color'])
colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
config = {
    'name' : st.column_config.TextColumn('Full Name (required)', width='large', required=True),
    'age' : st.column_config.NumberColumn('Age (years)', min_value=0, max_value=122),
    'color' : st.column_config.SelectboxColumn('Favorite Color', options=colors)
}

result = st.data_editor(df, column_config = config, num_rows='dynamic')

if st.button('Get results'):
    st.write(result)

'''
Opciones de formato adicionales
--------------------------------
Adem√°s de la configuraci√≥n de columnas, y tiene algunos par√°metros m√°s para personalizar la visualizaci√≥n de su marco de datos.st.dataframest.data_editor

 * hide_index : Establezca en para ocultar el √≠ndice de la trama de datos.True
 * column_order : Pase una lista de etiquetas de columna para especificar el orden de visualizaci√≥n.
* disabled : Pase una lista de etiquetas de columna para inhabilitarlas para su edici√≥n. Esto le permite evitar deshabilitarlos individualmente.
'''



'''
ver https://docs.streamlit.io/develop/api-reference/data/st.column_config


EJEMPLO DE COLUMNA AreaChartColumn
'''

import pandas as pd
import streamlit as st

data_df = pd.DataFrame(
    {
        "sales": [
            [0, 4, 26, 80, 100, 40],
            [80, 20, 80, 35, 40, 100],
            [10, 20, 80, 80, 70, 0],
            [10, 100, 20, 100, 30, 100],
        ],
    }
)

st.data_editor(
    data_df,
    column_config={
        "sales": st.column_config.AreaChartColumn(
            "Sales (last 6 months)",
            width="medium",
            help="The sales volume in the last 6 months",
            y_min=0,
            y_max=100,
         ),
    },
    hide_index=True,
)

